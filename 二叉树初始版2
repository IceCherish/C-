#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <string>
using namespace std;

template<class T>
struct Node {
	T data;
	Node *next;
};

template<class T>
struct BinTreeNode {
	T data;
	BinTreeNode *leftChild;
	BinTreeNode *rightChild;
};

template<class T>
class BinaryTree {
public:
	BinTreeNode<T> *CreateBinaryTree(); // 建立二叉树
	void NoRePreOrder(BinTreeNode<T> *root); // 非递归前序遍历二叉树
	void NoReInOrder(BinTreeNode<T> *root); // 非递归中序遍历二叉树
	void NoRePostOrder(BinTreeNode<T> *root); // 非递归后序遍历二叉树
	void RePreOrder(BinTreeNode<T> *p); // 递归前序遍历二叉树
	void ReInOrder(BinTreeNode<T> *p); // 递归中序遍历二叉树
	void RePostOrder(BinTreeNode<T> *p); // 递归后序遍历二叉树
	void LevelOrder(BinTreeNode<T> *root); // 层次遍历
	int LeafNumber(BinTreeNode<T> *p); // 求叶子数
	int NodeNumbers(BinTreeNode<T> *p); // 求二叉树结点数
	int getDepth(BinTreeNode<T> *p); // 获取二叉树的深度
	void ExchangeLeftAndRight(BinTreeNode<T> *parent); // 交换左右子树
	bool FindX(BinTreeNode<T> *root, T x); // 查找某个数
	bool isEmpty(BinTreeNode<T> *root); // 判断是否是空二叉树
	Node<T> *BuildLeafList(BinTreeNode<T> *root); // 生成叶子结点的链表
	void printLeafList(Node<T> *root); // 打印叶子结点链表
	BinTreeNode<T> *CopyBinaryTree(BinTreeNode<T> *p); // 复制二叉树
	bool isEqual(BinTreeNode<T>* p1, BinTreeNode<T>* p2); // 判断两棵二叉树是否等价
	void LinkToSequence(BinTreeNode<T>* p, T arr[], int i); // 将二叉链式存储结构转换为顺序存储结构
	void Printing(BinTreeNode<T> *root, int n);
	//BinTreeNode<T> *CreateBinaryTree2(T *VLR,T *LVR,int n);
	BinTreeNode<T> *createBinaryTree2(T *VLR,T *LVR,int n);
	BinTreeNode<T> *createBinaryTree3(T *LVR,T *LRV,int n);
	void PrintBiTree(BinTreeNode<T>* t, int level);
	void MakeEmpty(BinTreeNode<T>* p); // 清空二叉树
//	int buildTreeChild(int preorder[], int inorder[], int inbegin,int inend);
	//int buildTree(int preorder[], int inorder[]);
	//int find(int inorder[], int inbegin,int inend,int val);
	//int locat(int x,int *Arr);
//	void wangbuild(BinTreeNode<T> *root,int a[],int b[],int y) ;

	//void CreatBT1(BinTreeNode<T>* pre,BinTreeNode<T>* in, int n);
	//void buildTree(vector<int>& preorder, vector<int>& inorder);
	//void buildTree(vector<int>& preorder, vector<int>& inorder);
	//void CreatBT1(vector<int>& preorder,vector<int>& inorder,int ps,int pe,int is,int ie);
	//void insert(long value, String aValue);
};

// 使用前序递归创建二叉树，可以使用中序或后序
template<class T>
BinTreeNode<T> *BinaryTree<T>::CreateBinaryTree() {
	BinTreeNode<T> *p;

	T num;
	cin >> num;
	if (num == '#')
		p = NULL;
	else {
		p = new BinTreeNode<T>();
		if (p == NULL) {
			cerr << "申请空间失败！\n";
			exit(1);
		}
		p->data = num;
		p->leftChild = CreateBinaryTree();
		p->rightChild = CreateBinaryTree();
	}
	return p;
}


template<class T>
BinTreeNode<T> *BinaryTree<T>::createBinaryTree2(T *VLR,T *LVR,int n)//前序和中序 
{
	BinTreeNode<T> *t;
	if(n == 0)return NULL;
	int k = 0;
	while(VLR[0] != LVR[k]&&LVR[k] != '\0')k++;
	if(k == n)
	{
		cout<<"输入的前序和中序序列有误"<<endl;
		return NULL;
	} 
t = new BinTreeNode<T>();
	t->data = VLR[0];
//	t->leftChild = createBinaryTree(VLR+1,LVR,k);
	t->rightChild = createBinaryTree2(VLR+k+1,LVR+k+1,n-k-1);
	t->leftChild = createBinaryTree2(VLR+1,LVR,k);
	return t;
};
template<class T>
BinTreeNode<T> *BinaryTree<T>::createBinaryTree3(T *LVR,T *LRV,int n)//中序和后序 
{
	if(n == 0)return NULL;
	int k = 0;
	while(LRV[n-1] != LVR[k])k++;
	if(k == n)
	{
		cout<<"输入的前序和中序序列有误"<<endl;
		return NULL;
	} 
	BinTreeNode<T> *t = new BinTreeNode<T>();
	t->data = LRV[n-1];
	t->leftChild = createBinaryTree3(LVR,LRV,k);
	t->rightChild = createBinaryTree3(LVR+k+1,LRV+k,n-k-1);
	return t;
} 
template <class T>
void BinaryTree<T>::PrintBiTree(BinTreeNode<T>* t, int level) //二叉树t第level层结点数据域显示
{
//	char m;
  if( t == NULL) return;
  PrintBiTree(t->rightChild,level+1);
  cin.get();
  if(level!=0)			
  {
  	for(int i=0;i<6*(level-1);i++) cout<<"*";
	cout << "----";
  }
  cout<<t->data<<endl;
  PrintBiTree(t->leftChild, level+1); 
}


template<class T>
void BinaryTree<T>::Printing(BinTreeNode<T> *root, int n)
{
    if (root==NULL)
    {
        return;
    }
    else
    {
        Printing(root->rightChild,n+1);

        for (int i=0; i<n;i++)
            cout << "   ";
        cout <<root->data<<endl;

        Printing(root->leftChild,n+1);
    }

}














// 非递归前序遍历二叉树：先访问父结点，再访问左孩子结点，最后访问右孩子结点。
// 思路：从根结点访问，不断访问左孩子结点，如果右孩子结点存在，则先
//      保存在栈中访问到空结点了，就从栈中取出结点，重复此步骤，
//      直到栈空。
template<class T>
void BinaryTree<T>::NoRePreOrder(BinTreeNode<T> *root) {
	//    方法1:
	//    std::stack<BinTreeNode<T> *> s;
	//    BinTreeNode<T> *current;
	//    
	//    if(p == NULL)
	//        std::cout << "空二叉树\n";
	//    else {
	//        s.push(p);
	//        while(!s.empty()) {
	//            current = s.top(); // 取头结点
	//            std::cout << current->data << " ";
	//            s.pop();
	//            if(current->rightChild != NULL)
	//                s.push(current->rightChild);
	//            if(current->leftChild != NULL)
	//                s.push(current->leftChild);
	//        }
	//    }
		//    方法2:
	stack<BinTreeNode<T> *> s;
	BinTreeNode<T> *current;

	current = root;
	while (!s.empty() || current != NULL) {
		while (current != NULL) { // 当前指针非空
			std::cout << current->data << " ";
			s.push(current);
			current = current->leftChild;
		}
		if (!s.empty()) {
			current = s.top();
			s.pop();
			current = current->rightChild;
		}
	} // while
} // NoRePreOrder

// 非递归中序遍历二叉树：先访问左孩子结点，再访问父结点，最后访问右孩子结点。
// 思路：（1）将二叉树的根结点作为当前结点
//      （2）若当前结点非空，则该结点进栈并将其左孩子结点作为当前结点
//          重复步骤（2），直到当前结点为空为止
//      （3）若栈非空，则将栈顶点出栈并作为当前结点，接着访问当前结点，
//          再将当前结点的右孩子结点作为当前结点
template<class T>
void BinaryTree<T>::NoReInOrder(BinTreeNode<T> *root) {
	stack<BinTreeNode<T> *> s;
	BinTreeNode<T> *current;

	current = root;
	while (!s.empty() || current != NULL) {
		while (current != NULL) { // 当前结点非空
			s.push(current);
			current = current->leftChild;
		}
		if (!s.empty()) {
			current = s.top();
			s.pop();
			cout << current->data << " ";
			current = current->rightChild;
		}
	}
}

// 非递归后序遍历二叉树:先访问左结点，再访问右结点，最后访问根结点。
// 思路：(1)如果当前结点非空，设置标志flag = 0,
//         把根结点和标志flag分别进栈s1和s2；
//      (2)把左孩子结点作为当前结点，如果当前结点非空，则进栈s1，并把标志
//         flag=0存到标志栈s2中,重复步骤（2);
//      (3)直到当前结点为空，则取出s1,s2的栈顶点，判断s2的flag是否为1，
//         如果为1,说明是第二次出栈，则输出该结点；否则，把该结点存到栈s1
//         中， 并将flag设置为1，存储到s2中，同时，把右孩子结点作为当前
//         结点。重复（1）（2）（3）步骤，直到栈为空或当前结点为空
template<class T>
void BinaryTree<T>::NoRePostOrder(BinTreeNode<T> *root) {
	stack<BinTreeNode<T> *> s1;
	stack<int> s2;
	BinTreeNode<T> *current;
	int flag;

	current = root;
	while (!s1.empty() || current != NULL) {
		while (current != NULL) { // 当前结点非空
			s1.push(current); // 当前结点和第一次进栈标志进栈
			s2.push(0);
			current = current->leftChild; // 以当前结点的左孩子作为当前结点
		}
		if (!s1.empty()) { // 栈非空
			current = s1.top(); // s1,s2栈顶顶点出栈
			s1.pop();
			flag = s2.top();
			s2.pop();
			if (flag == 1) { // 如果该结点是第二次出栈
				cout << current->data << " "; // 访问结点
				current = NULL;
			}
			else {
				s1.push(current); // 结点第二次进栈
				s2.push(1);
				current = current->rightChild; // 以当前结点的右孩子作为当前结点
			} // else
		} // if
	} // while
} // NoRePostOrder

// 递归前序遍历二叉树
template<class T>
void BinaryTree<T>::RePreOrder(BinTreeNode<T> *p) {
	if (p != NULL) { // 二叉树非空
		cout << p->data << " "; // 对结点进行访问
		RePreOrder(p->leftChild); // 对左子树进行遍历
		RePreOrder(p->rightChild); // 对右子树进行遍历
	}
}

// 递归中序遍历二叉树
template<class T>
void BinaryTree<T>::ReInOrder(BinTreeNode<T> *p) {
	if (p != NULL) { // 二叉树非空
		RePreOrder(p->leftChild); // 对左子树进行遍历
		cout << p->data << " "; // 对结点进行访问
		RePreOrder(p->rightChild); // 对右子树进行遍历
	}
}

// 递归后序遍历二叉树
template<class T>
void BinaryTree<T>::RePostOrder(BinTreeNode<T> *p) {
	if (p != NULL) { // 二叉树非空
		RePreOrder(p->leftChild); // 对左子树进行遍历
		RePreOrder(p->rightChild); // 对右子树进行遍历
		cout << p->data << " "; // 对结点进行访问
	}
}

// 层次遍历
template<class T>
void BinaryTree<T>::LevelOrder(BinTreeNode<T> *root) {
	queue<BinTreeNode<T> *> q;
	BinTreeNode<T> *current;

	current = root;
	if (current != NULL)
		q.push(current);
	while (!q.empty()) {
		current = q.front(); // 取队列头结点
		q.pop();
		cout << current->data << " ";
		if (current->leftChild != NULL)
			q.push(current->leftChild);
		if (current->rightChild != NULL)
			q.push(current->rightChild);
	} // while
} // LevelOrder

// 求叶子数
template<class T>
int BinaryTree<T>::LeafNumber(BinTreeNode<T> *p) { // 求叶子数
	if (p == NULL)
		return 0;
	else { // 二叉树非空
		if (p->leftChild == NULL && p->rightChild == NULL)
			return 1;
		else
			return LeafNumber(p->leftChild) + LeafNumber(p->rightChild);
	}
}


// 求二叉树结点数
// 思路：（1）如果当前结点为空，则返回0
//      （2）如果不空，就返回1+左孩子树的结点树+右孩子树的结点数
//          （使用递归）
template<class T>
int BinaryTree<T>::NodeNumbers(BinTreeNode<T> *p) {
	if (p == NULL)
		return 0;
	return 1 + NodeNumbers(p->leftChild) + NodeNumbers(p->rightChild);
}

// 获取二叉树的深度
template<class T>
int BinaryTree<T>::getDepth(BinTreeNode<T> *p) {
	int depth1, depth2;

	if (p == NULL)
		return 0;
	depth1 = getDepth(p->leftChild); // 求左孩子树的高度
	depth2 = getDepth(p->rightChild); // 求右孩子树的高度
	if (depth1 > depth2)
		return (1 + depth1);
	return (1 + depth2); // else可省略写
}

// 交换左右孩子树
template<class T>
void BinaryTree<T>::ExchangeLeftAndRight(BinTreeNode<T> *parent) {
	BinTreeNode<T> *current;

	if (parent != NULL) {
		current = parent->leftChild;
		parent->leftChild = parent->rightChild;
		parent->rightChild = current;
		ExchangeLeftAndRight(parent->leftChild);
		ExchangeLeftAndRight(parent->rightChild);
	}
}

// 查找某个数:前序遍历各个结点,找x
template<class T>
bool BinaryTree<T>::FindX(BinTreeNode<T> *root, T x) {
	BinTreeNode<T> *current;
	stack<BinTreeNode<T> *> s;

	if (root == NULL)
		return false;
	current = root;
	while (!s.empty() || current != NULL) {
		while (current != NULL && current->data != x) {
			s.push(current);
			current = current->leftChild;
		}
		if (current != NULL && current->data == x)
			return true;
		if (!s.empty()) {
			current = s.top();
			s.pop();
			if (current->rightChild != NULL)
				current = current->rightChild;
			else
				current = NULL;
		}
	}
	return false;
}

// 判断是否是空二叉树
template<class T>
bool BinaryTree<T>::isEmpty(BinTreeNode<T> *root) {
	if (root == NULL)
		return true;
	return false;
}

// 生成叶子结点的链表
template<class T>
Node<T> *BinaryTree<T>::BuildLeafList(BinTreeNode<T> *root) {
	stack<BinTreeNode<T> *> s;
	BinTreeNode<T> *p;
	Node<T> *newNode;
	Node<T> *head = NULL, *current = NULL; // 头结点
	//int n = 0;
	if (root == NULL) // 空二叉树
		return NULL;
	// p不空,一直往左结点找，直到遇到结点的左孩子结点为空
	p = root;
	while (!s.empty() || p != NULL) {
		while (p != NULL) {
			s.push(p);
			p = p->leftChild;
		}
		if (!s.empty()) {
			p = s.top();
			s.pop();
			if (p->rightChild == NULL) {
				// 如果左结点，右结点为空，则为叶子结点
				newNode = new Node<T>();
				if (newNode == NULL) {
					std::cerr << "申请空间失败!\n";
					exit(1);
				}
				newNode->next = NULL;
				newNode->data = p->data;
				//n++;
				if (head == NULL)
					head = newNode;
				else
					current->next = newNode;
				current = newNode;
				p = NULL; // 注意要把p置空，否则最后退不出循环。
			}
			else
				p = p->rightChild;
		}
	}
	return head;
}

// 打印叶子结点链表
template<class T>
void BinaryTree<T>::printLeafList(Node<T> *root) {
	Node<T> *current;

	current = root;
	while (current != NULL) {
		cout << current->data << " ";
		current = current->next;
	}
}

// 复制二叉树
template<class T>
BinTreeNode<T> *BinaryTree<T>::CopyBinaryTree(BinTreeNode<T> *p) {
	BinTreeNode<T> *current;

	if (p == NULL)
		return NULL;
	current = new BinTreeNode<T>();
	if (current == NULL) {
		cerr << "申请空间失败！\n";
		exit(1);
	}
	current->data = p->data;
	current->leftChild = CopyBinaryTree(p->leftChild); // 复制左子树
	current->rightChild = CopyBinaryTree(p->rightChild); // 复制右子树
	return current;
}

// 判断两棵二叉树是否等价
template<class T>
bool BinaryTree<T>::isEqual(BinTreeNode<T>* p1, BinTreeNode<T>* p2) {
	bool isFlag;

	isFlag = false; // 假设不等价
	if (p1 == NULL && p2 == NULL) // 两者都为空
		isFlag = true;
	else if (p1 != NULL && p2 != NULL && (p1->data == p2->data)) { // 两个都不为空，并且值相同
		if (isEqual(p1->leftChild, p2->leftChild)) { // 左子树等价，然后再判断右子树
			if (isEqual(p1->rightChild, p2->rightChild)) // 右子树等价
				isFlag = true; // 左右子树都等价
		} // if
	} // eles if
	return isFlag;
}  // isEquit

// 将二叉链式存储结构转换为顺序存储结构
template<class T>
void BinaryTree<T>::LinkToSequence(BinTreeNode<T>* p, T arr[], int i) {
	if (p != NULL) {
		arr[i] = p->data;
		LinkToSequence(p->leftChild, arr, 2 * i + 1);
		LinkToSequence(p->rightChild, arr, 2 * i + 2);
	}
}

// 清空二叉树
template<class T>
void  BinaryTree<T>::MakeEmpty(BinTreeNode<T>* p) {
	if (p != NULL) {
		MakeEmpty(p->leftChild);
		MakeEmpty(p->rightChild);
		delete p;
		p = NULL;
	}
}

int main(int argc, const char * argv[]) {
	int choice, finished;
	BinaryTree<char> bt;
	BinTreeNode<char> *root, *root1, *root3, *root4;
	Node<char> *head; // 指针叶子链表
	char ch, arr[100];

	finished = 1;
	root = NULL;
	for (int i = 0; i < 100; i++)
		arr[i] = '#';
	while (finished) {
		cout << "\n*********菜单*********\n";
		cout << "1:建立二叉树\n";
		cout << "2:非递归前序遍历二叉树\n";
		cout << "3:非递归中序遍历二叉树\n";
		cout << "4:非递归后序遍历二叉树\n";
		cout << "5:递归前序遍历二叉树\n";
		cout << "6:递归中序遍历二叉树\n";
		cout << "7:递归后序遍历二叉树\n";
		cout << "8:层次遍历二叉树\n";
		//cout << "9:求叶子的个数\n";
		cout << "10:求二叉树结点的个数\n";
		cout << "11:求二叉树的深度\n";
		//cout << "12:交换二叉树的左、右子树\n";
		//cout << "13:查找二叉树中是否存在值X\n";
	//	cout << "14:判断二叉树是否为空二叉树\n";
		//cout << "15:将二叉树的所有叶子结点从左往右链接成单链表\n";
		//cout << "16:复制二叉树\n";
	//	cout << "17:判断两棵二叉树是否等价\n";
	//	cout << "18:将二叉链式存储结构转换为顺序存储结构\n";
		cout << "19:清除二叉树\n";
		cout << "20:退出\n";
		cout << "请输入选择（1-21）：\n";
		cin >> choice;
		switch (choice) {
		case 1:
			cout << "请输入数据建立二叉树：\n";
			root = bt.CreateBinaryTree();
			break;
		case 2:
			cout << "非递归前序遍历二叉树：\n";
			bt.NoRePreOrder(root);
			break;
		case 3:
			cout << "非递归中序遍历二叉树：\n";
			bt.NoReInOrder(root);
			break;
		case 4:
			cout << "非递归后序遍历二叉树：\n";
			bt.NoRePostOrder(root);
			break;
		case 5:
			cout << "递归前序遍历二叉树：\n";
			bt.RePreOrder(root);
			break;
		case 6:
			cout << "递归中序遍历二叉树：\n";
			bt.ReInOrder(root);
			break;
		case 7:
			cout << "递归后序遍历二叉树：\n";
			bt.RePostOrder(root);
			break;
		case 8:
			cout << "层次遍历二叉树：\n";
			bt.LevelOrder(root);
			break;
		case 9:
			cout << "二叉树中叶子的个数为：\n";
			cout << bt.LeafNumber(root) << std::endl;
			break;
		case 10:
			cout << "二叉树中结点的个数为：\n";
			cout << bt.NodeNumbers(root) << std::endl;
			break;
		case 11:
			cout << "二叉树的深度为：\n";
			cout << bt.getDepth(root) << std::endl;
			break;
		case 12:
			bt.ExchangeLeftAndRight(root); // 交换左右子树
			break;
		case 13:
			cout << "请输入要查找的值：";
			cin >> ch;
			if (bt.FindX(root, ch))
				cout << "二叉树中查找到了" << ch << "\n";
			else
				cout << "二叉树中没有" << ch << "\n";
			break;
		case 14:
			if (bt.isEmpty(root))
				cout << "空二叉树!" << "\n";
			else
				cout << "非空二叉树" << "\n";
			break;
		case 15:
			head = bt.BuildLeafList(root);
			cout << "遍历叶子结点链表：\n";
			bt.printLeafList(head);
			break;
		case 16:
			root1 = bt.CopyBinaryTree(root);
			cout << "原二叉树前序遍历：" << "\n";
			bt.RePreOrder(root);
			cout << endl;
			cout << "复制的二叉树前序遍历：" << "\n";
			bt.RePreOrder(root1);
			cout << endl;
			break;
		case 17:
			cout << "请输入第一棵二叉树的数据，建立二叉树：" << "\n";
			root3 = bt.CreateBinaryTree(); // 建立第一棵二叉树
			cout << "请输入第二棵二叉树的数据，建立二叉树：" << "\n";
			root4 = bt.CreateBinaryTree(); // 建立第二棵二叉树
			if (bt.isEqual(root3, root4))
				cout << "这两棵二叉树等价。";
			else
				cout << "这两棵二叉树不等价。\n";
			break;
		case 18:
			bt.LinkToSequence(root, arr, 0);
			for ( i = 0; i < 100; i++)
				if (arr[i] != '#')
					cout << i << " " << arr[i] << std::endl;
			break;
	case 19:
			bt.MakeEmpty(root);
			break;
		case 20:
			finished = 0;
			break;
		case 21:
			
				bt.PrintBiTree(root, 0);
				break;
				/*	int x;
					int a[10000],b[10000];
					cout<<"请输入遍历序列数组最大下标："<<endl;
					cin>>x;
					cout<<"输入前序遍历呦"<<endl;
					for(int o=0;o<=x;o++)
					{
					cin>>a[o];
					}
					cout<<"输入中序遍历呦"<<endl;
					for(int h=0;h<=x;h++)
					{
					cin>>b[h];
					}
					bt.wangbuild(root,a,b,x);
			}
					break;
					*/
		case 22:
			{
			/*int a,b,n;
	        char VLR[10000],LVR[10000];
			cin>>n;
			for(a=0;a<n;a++)
			{
				cin>>VLR[a];
			}
			for(b=0;b<n;b++)
			{
				cin>>LVR[b];
			}*/
	char VLR[]="ABCDGIEFH";
	char LVR[]="CBGDIAFEH";
	char LRV[]="CGIDBFHEA"; 
	root=bt.createBinaryTree2(VLR,LVR,9);
		bt.PrintBiTree(root,0);
			}
			break;
		default:
			cout << "输入错误，请重新输入！" << endl;
			break;
		}
	}
	return 0;
}
