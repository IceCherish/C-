std标准库函数

template <class _Ty>
_Post_equal_to_(_Right < _Left ? _Right : _Left) constexpr const _Ty& _Min_value(const _Ty& _Left, const _Ty& _Right)
    _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right
    return _Right < _Left ? _Right : _Left;
}

// FUNCTION TEMPLATE _Max_value
template <class _Ty>
_Post_equal_to_(_Left < _Right ? _Right : _Left) constexpr const _Ty& _Max_value(const _Ty& _Left, const _Ty& _Right)
    _NOEXCEPT_COND(noexcept(_Left < _Right)) { // return larger of _Left and _Right
    return _Left < _Right ? _Right : _Left;
}

// FUNCTION TEMPLATE iter_swap (from <algorithm>)
template <class _FwdIt1, class _FwdIt2>
void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right
    swap(*_Left, *_Right);
}

// FUNCTION TEMPLATE swap
template <class _Ty, size_t _Size, class>
void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
    _NOEXCEPT_COND(_Is_nothrow_swappable<_Ty>::value) { // exchange arrays stored at _Left and _Right
    if (&_Left != &_Right) { // worth swapping, swap ranges
        _Ty* _First1 = _Left;
        _Ty* _Last1  = _First1 + _Size;
        _Ty* _First2 = _Right;
        for (; _First1 != _Last1; ++_First1, ++_First2) {
            _STD iter_swap(_First1, _First2);
        }
    }
}

template <class _Ty, class>
void swap(_Ty& _Left, _Ty& _Right) _NOEXCEPT_COND(is_nothrow_move_constructible_v<_Ty>&&
        is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right
    _Ty _Tmp = _STD move(_Left);
    _Left    = _STD move(_Right);
    _Right   = _STD move(_Tmp);
}

// FUNCTION TEMPLATE _Swap_adl
template <class _Ty>
void _Swap_adl(_Ty& _Left, _Ty& _Right)
    _NOEXCEPT_COND(_Is_nothrow_swappable<_Ty>::value) { // exchange values stored at _Left and _Right, using ADL
    swap(_Left, _Right);
}
